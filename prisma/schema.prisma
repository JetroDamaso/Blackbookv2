generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Client {
    id               Int               @id @default(autoincrement())
    firstName        String
    lastName         String
    region           String
    province         String
    municipality     String
    barangay         String
    phoneNumber      String
    email            String            @unique
    dateCreated      DateTime          @default(now())
    isDeleted        Boolean?          @default(false)
    bookings         Booking[]
    payments         Payment[]
    scannedDocuments ScannedDocument[]
    notifications    Notification[]
}

model Role {
    id        Int        @id @default(autoincrement())
    name      String
    isDeleted Boolean?   @default(false)
    employees Employee[]
}

model Employee {
    id                String            @id @default(uuid())
    empId             String?
    firstName         String
    lastName          String
    password          String
    roleId            Int?
    dateOfEmployment  DateTime
    isActive          Boolean           @default(true)
    isDeleted         Boolean?          @default(false)
    lastLogin         DateTime?
    role              Role?             @relation(fields: [roleId], references: [id], onDelete: SetNull)
    historyLogs       HistoryLog[]
    discountRequests  DiscountRequest[] @relation("RequestedDiscounts")
    reviewedDiscounts DiscountRequest[] @relation("ReviewedDiscounts")
    notifications     Notification[]
    createdBookings   Booking[]         @relation("CreatedBookings")
}

model Pavilion {
    id                Int               @id @default(autoincrement())
    name              String            @unique
    price             Float
    maxPax            Int
    description       String
    color             String?
    bookings          Booking[]
    isActive          Boolean           @default(true)
    isDeleted         Boolean?          @default(false)
    inventoryStatuses InventoryStatus[]
    Package           Package[]
}

model InventoryCategory {
    id    Int             @id @default(autoincrement())
    name  String          @unique
    items InventoryItem[]
}

model InventoryItem {
    id                Int                @id @default(autoincrement())
    name              String
    categoryId        Int?
    quantity          Int
    out               Int                @default(0)
    isDeleted         Boolean?           @default(false)
    category          InventoryCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    inventoryStatuses InventoryStatus[]
}

model Booking {
    id                     Int                     @id @default(autoincrement())
    eventName              String
    clientId               Int?
    pavilionId             Int?
    packageId              Int?
    eventType              Int?
    calendarColor          String?
    catering               Int?
    startAt                DateTime?
    endAt                  DateTime?
    foodTastingAt          DateTime?
    totalPax               Int
    themeMotif             String?
    status                 Int
    customDiscount         Int?
    notes                  String?
    ref_pavilionName       String?
    ref_clientFullName     String?
    createdById            String?
    createdAt              DateTime                @default(now())
    createdBy              Employee?               @relation("CreatedBookings", fields: [createdById], references: [id], onDelete: SetNull)
    additionalCharges      AdditionalCharge[]
    billing                Billing?
    pavilion               Pavilion?               @relation(fields: [pavilionId], references: [id])
    client                 Client?                 @relation(fields: [clientId], references: [id])
    category               EventTypes?             @relation(fields: [eventType], references: [id])
    package                Package?                @relation(fields: [packageId], references: [id])
    historyLogs            HistoryLog[]
    inventoryStatuses      InventoryStatus[]
    menus                  Menu[]
    scannedDocuments       ScannedDocument[]
    otherServices          OtherService[]          @relation("BookingToOtherService")
    rooms                  Rooms[]                 @relation("BookingToRooms")
    discountRequests       DiscountRequest[]
    scheduledNotifications ScheduledNotification[]
    notifications          Notification[]
}

model Package {
    id          Int            @id @default(autoincrement())
    name        String
    pavilionId  Int?
    price       Float
    description String
    includePool Boolean        @default(false)
    isDeleted   Boolean?       @default(false)
    Booking     Booking[]
    pavilion    Pavilion?      @relation(fields: [pavilionId], references: [id], onDelete: SetNull)
    services    OtherService[] @relation("OtherServiceToPackage")
}

model EventTypes {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    isDeleted Boolean?  @default(false)
    bookings  Booking[]
}

model Menu {
    id             Int           @id @default(autoincrement())
    bookingId      Int?
    booking        Booking?      @relation(fields: [bookingId], references: [id], onDelete: SetNull)
    menuDishes     MenuDish[]
    MenuPackages   MenuPackages? @relation(fields: [menuPackagesId], references: [id])
    menuPackagesId Int?
}

model DishCategory {
    id                    Int            @id @default(autoincrement())
    name                  String         @unique
    dishes                Dish[]
    menuPackagesAllowedIn MenuPackages[] @relation("MenuPackageAllowedCategories")
}

model Dish {
    id          Int           @id @default(autoincrement())
    name        String
    categoryId  Int?
    allergens   String?
    description String?
    isDeleted   Boolean?      @default(false)
    category    DishCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    menuDishes  MenuDish[]
}

model MenuDish {
    id       Int   @id @default(autoincrement())
    menuId   Int?
    dishId   Int?
    quantity Int   @default(1)
    dish     Dish? @relation(fields: [dishId], references: [id], onDelete: SetNull)
    menu     Menu? @relation(fields: [menuId], references: [id], onDelete: SetNull)

    @@unique([menuId, dishId])
}

model MenuPackages {
    id                 Int            @id @default(autoincrement())
    name               String
    price              Int
    maxDishes          Int // Maximum number of dishes allowed
    allowedCategoryIds String? // JSON array of allowed dish category IDs
    description        String? // Description of what's included
    isActive           Boolean        @default(true)
    isDeleted          Boolean?       @default(false)
    Menu               Menu[]
    allowedCategories  DishCategory[] @relation("MenuPackageAllowedCategories")
}

model AdditionalCharge {
    id          Int      @id @default(autoincrement())
    bookingId   Int?
    name        String
    amount      Float
    description String?
    note        String?
    booking     Booking? @relation(fields: [bookingId], references: [id])
}

model OtherServiceCategory {
    id           Int            @id @default(autoincrement())
    name         String
    otherService OtherService[]
}

model OtherService {
    id          Int                   @id @default(autoincrement())
    name        String
    categoryId  Int?
    amount      Float?
    description String?
    packageId   Int?
    category    OtherServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    booking     Booking[]             @relation("BookingToOtherService")
    Package     Package[]             @relation("OtherServiceToPackage")
}

model Services {
    id          Int     @id @default(autoincrement())
    name        String
    category    Int
    amount      Float?
    description String?
}

model Rooms {
    id        Int       @id @default(autoincrement())
    name      String    @unique
    capacity  Int
    isDeleted Boolean?  @default(false)
    Booking   Booking[] @relation("BookingToRooms")
}

model InventoryStatus {
    id          Int            @id @default(autoincrement())
    inventoryId Int?
    pavilionId  Int?
    bookingId   Int?
    quantity    Int?
    booking     Booking?       @relation(fields: [bookingId], references: [id])
    pavilion    Pavilion?      @relation(fields: [pavilionId], references: [id])
    inventory   InventoryItem? @relation(fields: [inventoryId], references: [id])
}

model Billing {
    id                   Int       @id @default(autoincrement())
    bookingId            Int       @unique
    originalPrice        Float
    discountedPrice      Float
    discountType         String
    discountPercentage   Float? // Made nullable
    discountAmount       Float? // New field for fixed amount discounts
    discountId           Int? // Reference to predefined discount
    isCustomDiscount     Boolean   @default(false) // Track if it's a custom discount
    balance              Float
    catering             Float?
    cateringPerPaxAmount Float?
    modeOfPayment        String
    yve                  Float     @default(0)
    deposit              Float     @default(0)
    status               Int
    dateCompleted        DateTime?
    booking              Booking   @relation(fields: [bookingId], references: [id])
    payments             Payment[]
}

model HistoryLog {
    id         Int       @id @default(autoincrement())
    bookingId  Int?
    employeeId String?
    createdAt  DateTime  @default(now())
    employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
    booking    Booking?  @relation(fields: [bookingId], references: [id], onDelete: SetNull)
}

model ModeOfPayment {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    isDeleted Boolean? @default(false)
}

model Payment {
    id               Int               @id @default(autoincrement())
    billingId        Int?
    clientId         Int?
    orNumber         String? // Official Receipt Number
    notes            String?
    amount           Float
    date             DateTime          @default(now())
    status           String
    client           Client?           @relation(fields: [clientId], references: [id], onDelete: SetNull)
    billing          Billing?          @relation(fields: [billingId], references: [id], onDelete: SetNull)
    scannedDocuments ScannedDocument[]
}

model ScannedDocumentCategory {
    id               Int               @id @default(autoincrement())
    name             String            @unique
    scannedDocuments ScannedDocument[]
}

model ScannedDocument {
    id         Int                      @id @default(autoincrement())
    bookingId  Int?
    clientId   Int?
    paymentId  Int?
    name       String
    categoryId Int?
    date       DateTime                 @default(now())
    file       String
    category   ScannedDocumentCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    booking    Booking?                 @relation(fields: [bookingId], references: [id], onDelete: SetNull)
    client     Client?                  @relation(fields: [clientId], references: [id], onDelete: SetNull)
    payment    Payment?                 @relation(fields: [paymentId], references: [id], onDelete: SetNull)
}

model Discount {
    id          Int      @id @default(autoincrement())
    name        String
    percent     Float?
    amount      Float?
    isActive    Boolean  @default(true)
    isDeleted   Boolean? @default(false)
    description String?
}

model DiscountRequest {
    id             String    @id @default(cuid())
    bookingId      Int
    booking        Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    requestedById  String
    requestedBy    Employee  @relation("RequestedDiscounts", fields: [requestedById], references: [id])
    discountType   String
    discountValue  Float
    discountUnit   String // "PERCENTAGE" or "FIXED"
    justification  String
    documents      String? // JSON string array of document URLs
    status         String    @default("PENDING") // "PENDING", "APPROVED", "REJECTED", "MODIFIED"
    reviewedById   String?
    reviewedBy     Employee? @relation("ReviewedDiscounts", fields: [reviewedById], references: [id])
    reviewNotes    String?
    originalAmount Float?
    finalAmount    Float?
    requestedAt    DateTime  @default(now())
    reviewedAt     DateTime?

    @@index([bookingId])
    @@index([requestedById])
    @@index([status])
    @@index([reviewedById])
}

model Notification {
    id      String   @id @default(cuid())
    userId  String
    user    Employee @relation(fields: [userId], references: [id], onDelete: Cascade)
    type    String // "DISCOUNT_REQUEST", "DISCOUNT_RESPONSE", "BOOKING", "PAYMENT", "INVENTORY", "SYSTEM"
    title   String
    message String
    link    String?
    read    Boolean  @default(false)

    // Booking-related fields
    bookingId Int?
    booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    clientId  Int?
    client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)

    createdAt DateTime @default(now())

    @@index([userId])
    @@index([read])
    @@index([createdAt])
    @@index([bookingId])
}

model ScheduledNotification {
    id               String    @id @default(cuid())
    bookingId        Int
    booking          Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
    notificationType String // BOOKING_CREATED, PAYMENT_REMINDER_7, PAYMENT_REMINDER_3, PAYMENT_REMINDER_1, PAYMENT_OVERDUE, PAYMENT_COMPLETED
    scheduledFor     DateTime
    sent             Boolean   @default(false)
    sentAt           DateTime?
    createdAt        DateTime  @default(now())

    @@index([bookingId])
    @@index([scheduledFor, sent])
}

model GeneratedReport {
    id          String   @id @default(cuid())
    name        String
    reportType  String // BOOKINGS_BY_DATE, REVENUE_SUMMARY, etc.
    parameters  String // JSON string of report parameters
    reportData  String // JSON string of generated report data
    generatedBy String?
    createdAt   DateTime @default(now())

    @@index([reportType])
    @@index([createdAt])
}
