generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Client {
    id           Int       @id @default(autoincrement())
    firstName    String
    lastName     String
    region       String
    province     String
    municipality String
    barangay     String
    phoneNumber  String
    email        String    @unique
    dateCreated  DateTime  @default(now())
    bookings     Booking[]
    payments     Payment[]
}

model Role {
    id        Int        @id @default(autoincrement())
    name      String
    employees Employee[]
}

model Employee {
    id               String       @id @default(uuid())
    firstName        String
    lastName         String
    password         String
    roleId           Int?
    dateOfEmployment DateTime
    isActive         Boolean      @default(true)
    role             Role?        @relation(fields: [roleId], references: [id], onDelete: SetNull)
    historyLogs      HistoryLog[]
}

model Pavilion {
    id                Int               @id @default(autoincrement())
    name              String            @unique
    price             Float
    maxPax            Int
    description       String
    color             String?
    bookings          Booking[]
    isActive          Boolean           @default(true)
    inventoryStatuses InventoryStatus[]
    Package           Package[]
}

model InventoryCategory {
    id    Int             @id @default(autoincrement())
    name  String          @unique
    items InventoryItem[]
}

model InventoryItem {
    id                Int                @id @default(autoincrement())
    name              String
    categoryId        Int?
    quantity          Int
    out               Int                @default(0)
    category          InventoryCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    inventoryStatuses InventoryStatus[]
}

model Booking {
    id                 Int                @id @default(autoincrement())
    eventName          String
    clientId           Int?
    pavilionId         Int?
    packageId          Int?
    eventType          Int?
    calendarColor      String?
    catering           Int?
    startAt            DateTime?
    endAt              DateTime?
    foodTastingAt      DateTime?
    totalPax           Int
    themeMotif         String?
    status             Int
    customDiscount     Int?
    notes              String?
    ref_pavilionName   String?
    ref_clientFullName String?
    additionalCharges  AdditionalCharge[]
    billing            Billing?
    pavilion           Pavilion?          @relation(fields: [pavilionId], references: [id])
    client             Client?            @relation(fields: [clientId], references: [id])
    category           EventTypes?        @relation(fields: [eventType], references: [id])
    package            Package?           @relation(fields: [packageId], references: [id])
    historyLogs        HistoryLog[]
    inventoryStatuses  InventoryStatus[]
    menus              Menu[]
    scannedDocuments   ScannedDocument[]
    otherServices      OtherService[]     @relation("BookingToOtherService")
    rooms              Rooms[]            @relation("BookingToRooms")
}

model Package {
    id          Int            @id @default(autoincrement())
    name        String
    pavilionId  Int?
    price       Float
    description String
    includePool Boolean        @default(false)
    Booking     Booking[]
    pavilion    Pavilion?      @relation(fields: [pavilionId], references: [id], onDelete: SetNull)
    services    OtherService[] @relation("OtherServiceToPackage")
}

model EventTypes {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    bookings Booking[]
}

model Menu {
    id         Int        @id @default(autoincrement())
    bookingId  Int?
    booking    Booking?   @relation(fields: [bookingId], references: [id], onDelete: SetNull)
    menuDishes MenuDish[]
}

model DishCategory {
    id     Int    @id @default(autoincrement())
    name   String @unique
    dishes Dish[]
}

model Dish {
    id          Int           @id @default(autoincrement())
    name        String
    categoryId  Int?
    allergens   String?
    description String?
    category    DishCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    menuDishes  MenuDish[]
}

model MenuDish {
    id       Int   @id @default(autoincrement())
    menuId   Int?
    dishId   Int?
    quantity Int   @default(1)
    dish     Dish? @relation(fields: [dishId], references: [id], onDelete: SetNull)
    menu     Menu? @relation(fields: [menuId], references: [id], onDelete: SetNull)

    @@unique([menuId, dishId])
}

model AdditionalCharge {
    id          Int      @id @default(autoincrement())
    bookingId   Int?
    name        String
    amount      Float
    description String?
    note        String?
    booking     Booking? @relation(fields: [bookingId], references: [id])
}

model OtherServiceCategory {
    id           Int            @id @default(autoincrement())
    name         String
    otherService OtherService[]
}

model OtherService {
    id          Int                   @id @default(autoincrement())
    name        String
    categoryId  Int?
    amount      Float?
    description String?
    packageId   Int?
    category    OtherServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    booking     Booking[]             @relation("BookingToOtherService")
    Package     Package[]             @relation("OtherServiceToPackage")
}

model Services {
    id          Int     @id @default(autoincrement())
    name        String
    category    Int
    amount      Float?
    description String?
}

model Rooms {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    capacity Int
    Booking  Booking[] @relation("BookingToRooms")
}

model InventoryStatus {
    id          Int            @id @default(autoincrement())
    inventoryId Int?
    pavilionId  Int?
    bookingId   Int?
    quantity    Int?
    booking     Booking?       @relation(fields: [bookingId], references: [id])
    pavilion    Pavilion?      @relation(fields: [pavilionId], references: [id])
    inventory   InventoryItem? @relation(fields: [inventoryId], references: [id])
}

model Billing {
    id                 Int       @id @default(autoincrement())
    bookingId          Int       @unique
    originalPrice      Float
    discountedPrice    Float
    discountType       String
    discountPercentage Float? // Made nullable
    discountAmount     Float? // New field for fixed amount discounts
    discountId         Int? // Reference to predefined discount
    isCustomDiscount   Boolean   @default(false) // Track if it's a custom discount
    balance            Float
    modeOfPayment      String
    yve                Float     @default(0)
    deposit            Float     @default(0)
    status             Int
    dateCompleted      DateTime?
    booking            Booking   @relation(fields: [bookingId], references: [id])
    payments           Payment[]
}

model HistoryLog {
    id         Int       @id @default(autoincrement())
    bookingId  Int?
    employeeId String?
    createdAt  DateTime  @default(now())
    employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)
    booking    Booking?  @relation(fields: [bookingId], references: [id], onDelete: SetNull)
}

model ModeOfPayment {
    id   Int    @id @default(autoincrement())
    name String @unique
}

model Payment {
    id        Int      @id @default(autoincrement())
    billingId Int?
    clientId  Int?
    orNumber  String? // Official Receipt Number
    notes     String?
    amount    Float
    date      DateTime @default(now())
    status    String
    client    Client?  @relation(fields: [clientId], references: [id], onDelete: SetNull)
    billing   Billing? @relation(fields: [billingId], references: [id], onDelete: SetNull)
}

model ScannedDocumentCategory {
    id               Int               @id @default(autoincrement())
    name             String            @unique
    scannedDocuments ScannedDocument[]
}

model ScannedDocument {
    id         Int                      @id @default(autoincrement())
    bookingId  Int?
    name       String
    categoryId Int?
    date       DateTime                 @default(now())
    file       String
    category   ScannedDocumentCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    booking    Booking?                 @relation(fields: [bookingId], references: [id], onDelete: SetNull)
}

model Discount {
    id          Int     @id @default(autoincrement())
    name        String  @unique
    percent     Float? // Made nullable to support amount-based discounts
    amount      Float? // Fixed amount discount
    isActive    Boolean @default(true) // To enable/disable discounts
    description String? // Optional description
}
